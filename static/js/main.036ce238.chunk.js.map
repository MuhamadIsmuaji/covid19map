{"version":3,"sources":["global/API.js","pages/CovidWorldMap.js","App.js","serviceWorker.js","index.js"],"names":["API","axios","create","baseURL","CovidWorldMap","useState","worldMapCovidData","setworldMapCovidData","fetchData","a","get","data","temp","_","each","countries","value","key","find","o","attributes","Country_Region","name","code","includes","Deaths","Recovered","Active","Confirmed","alert","useEffect","mapOptions","chart","height","map","title","text","legend","mapNavigation","enabled","buttonOptions","verticalAlign","tooltip","useHTML","headerFormat","pointFormat","colorAxis","min","max","minColor","maxColor","series","mapData","worldMapData","joinBy","highchartsMap","Highcharts","className","constructorType","highcharts","options","App","role","aria-label","href","aria-expanded","data-target","aria-hidden","id","target","rel","icon","faGithub","size","style","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.036ce238.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst baseURL = 'https://api.kawalcorona.com/';\n\nexport const API = axios.create({\n  baseURL: baseURL\n})","import React from 'react';\nimport countries from '../json/country';\nimport { API } from '../global/API';\nimport _ from 'lodash';\nimport Highcharts from 'highcharts';\nimport highchartsMap from \"highcharts/modules/map\";\nimport HighchartsReact from \"highcharts-react-official\";\nimport worldMapData from \"@highcharts/map-collection/custom/world.geo.json\";\nimport { useState, useEffect } from 'react';\n\nexport const CovidWorldMap = () => {\n  const [worldMapCovidData, setworldMapCovidData] = useState([]);\n\n  const fetchData = async () => {\n    try {\n      const { data } = await API.get();\n      let temp = null;\n      _.each(countries, (value, key) => {\n        temp = _.find(data, (o) => {\n          return o.attributes.Country_Region === value.name || o.attributes.Country_Region === value.code || value.name.includes(o.attributes.Country_Region);\n        });\n\n        countries[key].Deaths = countries[key].Recovered = countries[key].Active = countries[key].value = 0;\n        if (typeof temp !== 'undefined') {\n          countries[key].Deaths = temp.attributes.Deaths;\n          countries[key].Recovered = temp.attributes.Recovered;\n          countries[key].Active = temp.attributes.Active;\n          countries[key].value = temp.attributes.Confirmed;\n        }\n      });\n\n      setworldMapCovidData(countries);\n    } catch (error) {\n      alert(error)\n    }\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, [])\n\n  const mapOptions = {\n    chart: {\n      height: 650,\n      map: 'custom/world'\n    },\n\n    title: {\n      text: null\n    },\n\n    legend: {\n      title: {\n        text: 'Total Kasus',\n      }\n    },\n\n    mapNavigation: {\n      enabled: true,\n      buttonOptions: {\n        verticalAlign: 'bottom'\n      }\n    },\n\n    tooltip: {\n      useHTML: true,\n      headerFormat: '',\n      pointFormat: `<span style=\"font-size: 25px;\"><strong>{point.name}</strong></span><br/>\n        <span style=\"font-size: 20px;\">Positif: {point.Active}</span><br/>\n        <span style=\"font-size: 20px;\">Sembuh: {point.Recovered}</span><br/>\n        <span style=\"font-size: 20px;\">Meninggal: {point.Deaths}</span><br/>\n        <span style=\"font-size: 20px;\">Total Kasus: {point.value}</span>`,\n    },\n\n    colorAxis: {\n      min: 1,\n      max: 1000,\n      minColor: '#efecf3',\n      maxColor: '#990041',\n    },\n\n    series: [{\n      data: worldMapCovidData,\n      mapData: worldMapData,\n      joinBy: ['iso-a3', 'code3'],\n      name: 'Total Kasus',\n    }]\n  }\n\n  highchartsMap(Highcharts);\n\n  return (\n    <div className=\"panel\">\n      <div className=\"panel-block\">\n        <div className=\"container\">\n          <div className=\"columns\">\n            <div className=\"column is-full\">\n              <HighchartsReact\n                constructorType ={'mapChart'}\n                highcharts={Highcharts}\n                options={mapOptions}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}","import React from 'react';\nimport 'bulma/css/bulma.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGithub } from '@fortawesome/free-brands-svg-icons'\nimport { CovidWorldMap } from './pages/CovidWorldMap';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <nav className=\"navbar is-light\" role=\"navigation\" aria-label=\"main navigation\">\n        <div className=\"container\">\n          <div className=\"navbar-brand\">\n            <a className=\"navbar-item\" href=\"/\"><strong>#Covid19Map</strong></a>\n            <a role=\"button\" className=\"navbar-burger burger\" aria-label=\"menu\" aria-expanded=\"false\" data-target=\"navbarBasicExample\">\n              <span aria-hidden=\"true\"></span>\n              <span aria-hidden=\"true\"></span>\n              <span aria-hidden=\"true\"></span>\n            </a>\n          </div>\n\n          <div id=\"navbarBasicExample\" className=\"navbar-menu\">\n            <div className=\"navbar-start\"></div>\n\n            <div className=\"navbar-end\">\n              <div className=\"navbar-item\">\n                <a className=\"bd-navbar-icon navbar-item\" href=\"https://github.com/MuhamadIsmuaji/covid19map\" target=\"_blank\" rel=\"noopener noreferrer\">\n                  <FontAwesomeIcon icon={faGithub} size=\"2x\" />\n                </a>\n              </div>\n            </div>\n          </div>\n        </div>\n      </nav>\n      <div className=\"container\" style={{ marginTop: '10px' }}>\n        <div className=\"columns\">\n          <div className=\"column is-full has-text-centered\">\n            <h2 className=\"title\">#Covid19Map</h2>\n            <h4 className=\"subtitle\">Data based on <a className=\"has-text-primary\" href=\"https://kawalcorona.com\" target=\"_blank\" rel=\"noopener noreferrer\">kawalcorona.com</a></h4>\n          </div>\n        </div>\n        <div className=\"columns\">\n          <div className=\"column is-full\">\n            <div className=\"mapContainer\">\n              <CovidWorldMap />\n            </div>\n          </div>\n        </div>\n        <div className=\"columns\">\n          <div className=\"column is-full\">\n            <p className=\"has-text-grey-light has-text-centered\">\n              Made by <a className=\"has-text-primary\" href=\"https://github.com/MuhamadIsmuaji\" target=\"_blank\" rel=\"noopener noreferrer\">Muhamad Ismuaji Prajitno</a>.&nbsp;\n              Thanks to <a className=\"has-text-primary\" href=\"https://kawalcorona.com\" target=\"_blank\" rel=\"noopener noreferrer\">kawalcorona.com</a>\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}